#!/usr/bin/env python

import os
import sys
import subprocess as subp
import wf_python_utils as putils 

RAPL_LOADER = "rapl_loader"
RAPL_BS = "./__rapl_bs" 


# ========
# sub-routines
# ========
def RAPLTest (command):
    assert(type(command) is str)
    assert(putils.hasCommand("bash")) 

    # -- creat a bash script fo the command --
    bs = open(RAPL_BS, "w")

    bs.write("#!/usr/bin/env bash\n")
    bs.write("\n") 
    bs.write(command + "\n") 

    bs.close()

    os.system("chmod +x " + RAPL_BS) 

    # -- call RAPL_LOADER -- 
    stdout_rapl = subp.Popen(RAPL_LOADER+" "+RAPL_BS, shell=True, stdout=subp.PIPE).stdout

    # -- parse RAPL_LOADER's results -- 
    rapl_report = {} 

    for aline in stdout_rapl:
        aline = aline.strip()

        if (aline.startswith("PACKAGE_ENERGY:") and (aline.endswith("J"))):
            aline = aline[15:len(aline)-1].strip()

            rapl_report["package_energy"] = float(aline)

    os.system("rm " + RAPL_BS)
    
    assert("package_energy" in rapl_report.keys()) 
    return rapl_report


def takeAverage (margin, in_vs = []):
    assert(type(margin) is int)
    assert(0 <= margin)
    assert(2*margin < len(in_vs))

    vs = in_vs[:] 
    
    assert(all([(type(v) is float) for v in vs]))

    vs.sort()
    vs = vs[margin : len(vs)-margin]
    assert(len(vs) > 0) 

    return (sum(vs) / float(len(vs))) 
            


# ========
# main
# ========

assert(len(sys.argv) >= 4)

N_TESTS = int(sys.argv[1])
assert(N_TESTS > 0) 

MARGIN = int(sys.argv[2])
assert(0 <= MARGIN) 
assert((2*MARGIN) < N_TESTS)

COMMAND = ""
for i in range(3, len(sys.argv)):
    COMMAND = COMMAND + sys.argv[i] + " "
COMMAND = COMMAND[0:len(COMMAND)-1]

print ("N_TESTS: " + str(N_TESTS))
print ("MARGIN:  " + str(MARGIN))
print ("COMMAND: " + str(COMMAND)) 


# -- check RAPL loader --
assert(putils.hasCommand(RAPL_LOADER))


# -- go test --
rapl_results = {}
for t in range(0, N_TESTS):
    print ("PAPI-PEE test " + str(t))
    
    rapl_report = RAPLTest(COMMAND)

    for k,v in rapl_report.iteritems():
        if (t == 0):
            assert(k not in rapl_results.keys())
            rapl_results[k] = [v]

        else:
            assert(k in rapl_results.keys())
            rapl_results[k].append(v)

print (str(rapl_results)) 

for k in rapl_results.keys():
    rapl_results[k] = takeAverage(MARGIN, rapl_results[k])

print (str(rapl_results)) 
